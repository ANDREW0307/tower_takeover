16
{"last_modification_time":1563776454,"language":1,"import_file":"d:/pros projects/tower_takeover/include/macro.h","args_hash":7143976978263335256,"includes":[],"dependencies":[],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0],"uses":[]}],"funcs":[{"id":0,"usr":3721024490580843521,"detailed_name":"void rack(int speed)","short_name_offset":5,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"Moves the rack in a given speed. Use negative values for going down. Uses RPM for speed.","declarations":[{"spell":"8:6-8:10|-1|1|1","param_spellings":["8:15-8:20"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":9786032176946096248,"detailed_name":"void arm(int speed)","short_name_offset":5,"short_name_size":3,"kind":12,"storage":1,"hover":"","comments":"Moves the arm speed in a given speed. Use negative values for going down. Uses RPM for speed.","declarations":[{"spell":"11:6-11:9|-1|1|1","param_spellings":["11:14-11:19"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":1613186276990380940,"detailed_name":"void roller(int speed)","short_name_offset":5,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"Rotates the rollers in a given speed. Use negative values for going down. Uses RPM for speed.","declarations":[{"spell":"14:6-14:12|-1|1|1","param_spellings":["14:17-14:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":9463491065536651413,"detailed_name":"void liftAsync(double target, int speed, double rate)","short_name_offset":5,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"Moves the lift. This is for autonomouses only.","declarations":[{"spell":"22:6-22:15|-1|1|1","param_spellings":["22:23-22:29","22:35-22:40","22:49-22:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":15593810345570443060,"detailed_name":"void claw(double target, int speed)","short_name_offset":5,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"Opens or closes the claw to an absolute target, in a given speed.","declarations":[{"spell":"25:6-25:10|-1|1|1","param_spellings":["25:18-25:24","25:30-25:35"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":12563362263503851386,"detailed_name":"void clawTo(bool open)","short_name_offset":5,"short_name_size":6,"kind":12,"storage":1,"hover":"","comments":"Moves the claw. When boolean is set to true, it will open. If it is set to false, it will close.","declarations":[{"spell":"28:6-28:12|-1|1|1","param_spellings":["28:18-28:22"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":16519798872813996946,"detailed_name":"double pTerm(double target, double sensor, double kP)","short_name_offset":7,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"Calculates P term with the following equation. (Target - Sensor) * kP","declarations":[{"spell":"36:8-36:13|-1|1|1","param_spellings":["36:21-36:27","36:36-36:42","36:51-36:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":15578913409717711667,"detailed_name":"double dTerm(double now, double last)","short_name_offset":7,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"Calculates D term with the following equation. (Now - Last)","declarations":[{"spell":"39:8-39:13|-1|1|1","param_spellings":["39:21-39:24","39:33-39:37"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":2187104803641528038,"detailed_name":"double slew(double target, double actual, double rate)","short_name_offset":7,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"Provides a slew output based on the input.","declarations":[{"spell":"42:8-42:12|-1|1|1","param_spellings":["42:20-42:26","42:35-42:41","42:50-42:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":14740877011042002903,"detailed_name":"void wait(int ms)","short_name_offset":5,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"Basic functions that everybody knows.","declarations":[{"spell":"50:6-50:10|-1|1|1","param_spellings":["50:15-50:17"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":10287126595592114041,"detailed_name":"void print(const char *text)","short_name_offset":5,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"51:6-51:11|-1|1|1","param_spellings":["51:25-51:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":14335186871399897329,"detailed_name":"bool isStacking","short_name_offset":5,"short_name_size":10,"hover":"","comments":"","declarations":["1:13-1:23|-1|1|1"],"type":0,"uses":[],"kind":13,"storage":2}]}